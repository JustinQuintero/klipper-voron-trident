[gcode_macro PRINT_START]
gcode:
    # Custom Start G-code parameters
    {% set bedTemp = params.BED_TEMP|default(110)|int %}            # Heated bed temperature, default is 110
    {% set chamberTemp = params.CHAMBER_TEMP|default(50)|int %}     # Chamber temperature, default is 50
    {% set DWELL = params.DWELL|default(5)|int * 60000%}            # Duration, default is 5 minutes
    {% set extruderTemp = params.EXTRUDER_TEMP|default(245)|int %}  # Extruder temperature, default is 245
    {% set extrusionMultiplier = params.EM|default(1)|string %}     # Extrusion multiplier, default use klipper variable
    {% set firmwareRetraction = params.FR|default(0)|string %}      # Firmware retraction, default is disabled
    {% set MATERIAL = params.MATERIAL|default("XXX")|string %}      # Material type, default to 'XXX'

    # Set vars
    _PRINT_VARIABLES
    {% set V = printer["gcode_macro _PRINT_VARIABLES"].verbose %}

    # Print area
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    {% set MESH_MIN = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}

    # ABS
    {% set emA = printer["gcode_macro _PRINT_VARIABLES"].extrusion_multiplier_abs %}     # Extrusion multiplier
    {% set paA = printer["gcode_macro _PRINT_VARIABLES"].pressure_advance_abs %}         # Pressure advance
    {% set rlA = printer["gcode_macro _PRINT_VARIABLES"].retract_length_abs %}           # Retract length
    {% set rsA = printer["gcode_macro _PRINT_VARIABLES"].retract_speed_abs %}            # Retract speed
    {% set ulA = printer["gcode_macro _PRINT_VARIABLES"].unretract_extra_length_abs %}   # Unretract extra length
    {% set usA = printer["gcode_macro _PRINT_VARIABLES"].unretract_speed_abs %}          # Unretract speed

    # PLA
    {% set emP = printer["gcode_macro _PRINT_VARIABLES"].extrusion_multiplier_pla %}     # Extrusion multiplier
    {% set paP = printer["gcode_macro _PRINT_VARIABLES"].pressure_advance_pla %}         # Pressure advance
    {% set rlP = printer["gcode_macro _PRINT_VARIABLES"].retract_length_pla %}           # Retract length
    {% set rsP = printer["gcode_macro _PRINT_VARIABLES"].retract_speed_pla %}            # Retract speed
    {% set ulP = printer["gcode_macro _PRINT_VARIABLES"].unretract_extra_length_pla %}   # Unretract extra length
    {% set usP = printer["gcode_macro _PRINT_VARIABLES"].unretract_speed_pla %}          # Unretract speed

    # Material dependant parameters like Flow, PA, Firmware Retraction, etc...
    {% if V %}
        RESPOND MSG="Material: {MATERIAL}"
    {% endif %}
    {% if MATERIAL == "ABS" %}
        {% if extrusionMultiplier == "1" %}
            {% if V %}
                RESPOND MSG="Setting extrusion_multiplier: {emA}"
            {% endif %}
            SET_FLOW FLOW={emA}
        {% else %}
            {% if V %}
                RESPOND MSG="Using slicer extrusion multiplier: {extrusionMultiplier}"
            {% endif %}
        {% endif %}
        {% if firmwareRetraction == "1" %}
            {% if V %}
                RESPOND MSG="Firmware retraction enabled"
            {% endif %}
            SET_RETRACTION RETRACT_LENGTH={rlA} RETRACT_SPEED={rsA} UNRETRACT_EXTRA_LENGTH={ulA} UNRETRACT_SPEED={usA}
        {% else %}
            {% if V %}
                RESPOND MSG="Firmware retraction disabled"
            {% endif %}
        {% endif %}
        SET_PRESSURE_ADVANCE ADVANCE={paA}
    {% elif MATERIAL == "PLA" %}
        {% if extrustionMultiplier == "1" %}
            {% if V %}
                RESPOND MSG="extrusion_multiplier: {emP}"
            {% endif %}
            SET_FLOW FLOW={emP}
        {% else %}
            {% if V %}
                RESPOND MSG="slicer extrusion multiplier: {extrusionMultiplier}"
            {% endif %}
        {% endif %}
        {% if firmwareRetraction == "1" %}
            {% if V %}
                RESPOND MSG="Firmware retraction enabled"
            {% endif %}
            SET_RETRACTION RETRACT_LENGTH={rlP} RETRACT_SPEED={rsP} UNRETRACT_EXTRA_LENGTH={ulP} UNRETRACT_SPEED={usP}
        {% else %}
            {% if V %}
                RESPOND MSG="Firmware retraction disabled"
            {% endif %}
        {% endif %}
        SET_PRESSURE_ADVANCE ADVANCE={paP}
    {% endif %}

    # Setting extruder and bed temperature
    G28
    M104 S{extruderTemp|float*0.75}                     # Set extruder temperature to 75% of the print temperature to soften filament on nozzle
    M140 S{bedTemp}                                     # Set bed temperature
    {% if V %}
        RESPOND MSG="Waiting for temperature..."
    {% endif %}
    M190 S{bedTemp}                                     # Wait for temperature

    # Heatsoak
    {% if V %}
        RESPOND MSG="Heat soaking..."
    {% endif %}
    HEAT_SOAK TARGET={bedTemp} DURATION={DWELL}         # Set heatsoak target and duration
    G4 P{DWELL}
    G4 P1000

    # Homing, leveling, and calibrating z-offset
    {% if V %}
        RESPOND MSG="Homing..."
    {% endif %}
    STATUS_HOMING
    G28                                                 # Homing XYZ

    {% if V %}
        RESPOND MSG="Leveling..."
    {% endif %}
    STATUS_LEVELING
    Z_TILT_ADJUST                                       # Performing Z tilt

    G28 Z                                               # Homing Z

    {% if V %}
        RESPOND MSG="Calibrating Z-offset..."
    {% endif %}
    STATUS_CALIBRATING_Z
    Attach_Probe_Lock                                   # Attach probe and lock
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    CALIBRATE_Z                                         # Auto calibrate z-offset

    # Getting bed mesh
    {% if V %}
        RESPOND MSG="Getting bed mesh..."
    {% endif %}
    STATUS_MESHING

    G90                                                 # Use absolute coordinates
    M83                                                 # Use relative distances for extrusion
    ADAPTIVE_BED_MESH
    Dock_Probe_Unlock                                   # Dock probe and unlock
    STATUS_READY

    # Move to prime position
    {% if V %}
        RESPOND MSG="Moving to prime position"
    {% endif %}
    PRIME_LINE EXTRUDER_TEMP={extruderTemp} XPAD=0 YPAD=0 LENGTH=50 PRINT_SPEED=30 TRAVEL_SPEED=200 PURGE=8 RETRACT=0.75 EXTRUSION_MULTIPLIER=1 PRINT_HANDLE=0 HANDLE_FAN=35 AREA_START={MESH_MIN|default("0,0")}

    STATUS_PRINTING

# VintageGriffin's automatic prime line macro
[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set area = {
        'min_x'   : params.AREA_START.split(",")[0]|float,
        'min_y'   : params.AREA_START.split(",")[1]|float,
        'safe_x'  : 125,  # lowest X coordinates where the prime line can start
        'safe_y'  : 0,    # lowest Y coordinates where the prime line can start
        'offset'  : 30,   # distance in the Y axis between the prime line and the print skirt
    } %}
    {% set line = {
        'x_padding'       : params.XPAD|default(0)|float,   # left/right padding around the bed the line can't print into
        'y_padding'       : params.YPAD|default(0)|float,   # top/bottom padding around the bed the line can't print into
        'initial_purge'   : params.PURGE|default(8)|int,    # mm of filament to purge before printing. set to 0 to disable
        'retract_after'   : params.RETRACT|default(1)|int,  # mm of filament to retract after printing. set to 0 to disable
        'length'          : params.LENGTH|default(150)|int,
        'print_speed'     : params.PRINT_SPEED|default(30)|int,
        'travel_speed'    : params.TRAVEL_SPEED|default(200)|int,
        'extr_multi'      : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
        'overlap_percent' : 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
        'do_print'    : params.PRINT_HANDLE|default(1)|int, # set to 0 to disable printing the handle
        'fan_percent' : params.HANDLE_FAN|default(40)|int,  # without fan the handle is too small and melty to print upright
        'width'       : 5.0,
        'height'      : 5.0,
        'move_away'   : 0 # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter * 0.75, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}
    {% if area.min_x < area.safe_x %}
        {% set start_x = area.safe_x|float %}
    {% else %}
        {% set start_x = area.min_x|float %}
    {% endif %}
    {% if (area.min_y - area.offset) < area.safe_y %}
        {% set start_y = area.safe_y|float %}
    {% else %}
        {% set start_y = (area.min_y - area.offset)|float %}
    {% endif %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    M117 Prime Line
    G90 # absolute positioning
    G0 X{start_x} Y{start_y} Z{line.height + 2} F{line.travel_speed * 60} # move to starting position
    M109 S{params.EXTRUDER_TEMP|float*0.98} # Wait until 98% of extruder temp is reached, then continue  
    M104 S{params.EXTRUDER_TEMP} # Set printing extruder temp
    G0 Z{line.height} F{line.travel_speed}
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
        G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
        G0 F{line.print_speed * 60} # set print speed
        {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
        M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
        {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
            G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
            G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
        {% endfor %}
        M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract at 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117 # clear message

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE