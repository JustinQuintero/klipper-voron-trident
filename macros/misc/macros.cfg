#####################################################################
# Miscellaneous
#####################################################################

[gcode_macro HOME]
gcode:
    {% if printer.toolhead.homed_axes != 'xyz' %}
        STATUS_HOMING
        G28
    {% endif %}

[gcode_macro CENTER]
description: Center the printhead for heatsoak
gcode:
    {% set travel_speed = printer["gcode_macro _User_Variables"].travel_speed * 60 %}

    {% set max_x = printer.configfile.config.stepper_x.position_max|int %}
    {% set max_y = printer.configfile.config.stepper_y.position_max|int %}
    {% set max_z = printer.configfile.config.stepper_z.position_max|int %}

    HOME
    G90
    G0 X{ max_x / 2 } Y{ (max_y - 7) / 2 } G0 Z{ max_z * 0.2 } F{travel_speed * 0.3}

[gcode_macro TEST_HOME]
description: Test homing routine
gcode:
    # Homing, leveling, and calibrating z-offset
    {% if V %}
        RESPOND MSG="Homing..."
    {% endif %}
    STATUS_HOMING
    G28                                                 # Homing XYZ

    {% if V %}
        RESPOND MSG="Leveling..."
    {% endif %}
    Attach_Probe_Lock                                   # Attach probe and lock
    STATUS_LEVELING
    Z_TILT_ADJUST                                       # Performing Z tilt

    G28 Z                                               # Homing Z

    {% if V %}
        RESPOND MSG="Calibrating Z-offset..."
    {% endif %}
    STATUS_CALIBRATING_Z
    COMPUTE_MESH_PARAMETERS SIZE=0_0_300_300
    CALIBRATE_Z                                         # Auto calibrate z-offset

    # Getting bed mesh
    {% if V %}
        RESPOND MSG="Getting bed mesh..."
    {% endif %}
    STATUS_MESHING

    G90                                                 # Use absolute coordinates
    M83                                                 # Use relative distances for extrusion
    ADAPTIVE_BED_MESH                                   # Create adaptive bed mesh
    Dock_Probe_Unlock                                   # Dock probe and unlock
    STATUS_READY

[gcode_macro DISABLE_MOTORS]
description: Disable all stepper motors
gcode:
    M84

[gcode_macro M900]
gcode:
    {% if 'K' in params %}
        {% if 'E' in params %}
            SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
        {% else %}
            SET_PRESSURE_ADVANCE ADVANCE={params.K}
        {% endif %}
    {% endif %}

[gcode_macro SET_FLOW]
gcode:
    {% set flow = params.FLOW|default(1)|float*100 %}      # Convert param to percentage
        M221 S{flow}

[gcode_macro SET_SPEED]
gcode:
    {% set speed = params.SPEED|default(100)|int %}
        M220 S{speed}

#####################################################################
# Hidden gcode
#####################################################################

[delayed_gcode _clear_display]
gcode:
    M117

#####################################################################
# Search printer objects
#####################################################################

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}