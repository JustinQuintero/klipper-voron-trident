#####################################################################
# Build plate offset
#####################################################################

[gcode_macro SAVE_OFFSET]
description: Save z-offset for the selected surface
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set SURFACE = svv['surface_type']|default("smooth") %}
    {% set Z_OFFSET = params.OFFSET|default(printer.gcode_move.homing_origin.z)|float %}
    {% set OLD_Z_OFFSET = svv['z_offset_' + SURFACE]|default("unknown") %}

    SAVE_VARIABLE VARIABLE=z_offset_{SURFACE} VALUE={'%.3f' % Z_OFFSET}

    RESPOND TYPE=command MSG="{'build plate: %s, offset: %r -> %05.3f' % (SURFACE, OLD_Z_OFFSET, Z_OFFSET)}"
    SET_GCODE_OFFSET Z={'%.3f' % Z_OFFSET}

[gcode_macro SMOOTH]
description: Changes current z-offset for the selected surface
gcode:
    {% set svv = printer.save_variables.variables %}
    SAVE_VARIABLE VARIABLE=surface_type VALUE="'smooth'"
    SET_GCODE_OFFSET Z={svv.z_offset_smooth}

[gcode_macro TEXTURED]
description: Changes current z-offset for the selected surface
gcode:
    {% set svv = printer.save_variables.variables %}
    SAVE_VARIABLE VARIABLE=surface_type VALUE="'textured'"
    SET_GCODE_OFFSET Z={svv.z_offset_textured}

#####################################################################
# Miscellaneous
#####################################################################

[gcode_macro DISABLE_MOTORS]
description: Disable all stepper motors
gcode:
    M18
    STATUS_OFF

[gcode_macro M900]
gcode:
    {% if 'K' in params %}
        {% if 'E' in params %}
            SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
        {% else %}
            SET_PRESSURE_ADVANCE ADVANCE={params.K}
        {% endif %}
    {% endif %}

[gcode_macro SET_FLOW]
gcode:
    {% set flow = params.FLOW|default(1)|float*100 %}      # Convert param to percentage
    M221 S{flow}

[gcode_macro SET_SPEED]
gcode:
    {% set speed = params.SPEED|default(100)|int %}
    M220 S{speed}

#####################################################################
# Hidden gcode
#####################################################################

[gcode_macro _CG28]
gcode:
    {% if printer.toolhead.homed_axes != 'xyz' %}
    G28
    {% endif %}

[delayed_gcode _clear_display]
gcode:
    M117

#####################################################################
# Cancel/Pause/Resume
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_VELOCITY_LIMIT ACCEL=6000 ACCEL_TO_DECEL=3000 SQUARE_CORNER_VELOCITY=5 # reset acceleration
    M104 S0
    M140 S0
    M106 S0
    G91 E-2
    CLEAR_PAUSE
    BASE_CANCEL_PRINT
    Park_toolhead
    SDCARD_RESET_FILE
    M221 S100
    BED_MESH_CLEAR
    DISABLE_MOTORS

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    #Edit this#
    {% set X = 230 %}   #X coordinate
    {% set Y = 230 %}   #Y coordinate
    {% set Z = 10  %}   #Z coordinate
    ###########
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-1.7 F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000
    G91

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    G91
    G1 E1.7 F2100
    G91
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

#####################################################################
# Search printer objects
#####################################################################

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}